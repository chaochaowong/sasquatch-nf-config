//working directory for temporary/intermediate files produced in the workflow processes
workDir = "/data/hps/assoc/private/sarthy_lab/user/cwo11/temp"

//global parameters
params {
    // general options
    sample_sheet                = '/data/hps/assoc/private/sarthy_lab/NGS/CUTnRUN_Results/CLe2_K562_JIH5_TFs_CnT_07152024/data/nf-sample-sheet.csv'
    partition                   = 'cpu-core-sponsored'
    account                     = 'cpu-sarthy_lab-sponsored'
    outdir                      = '/data/hps/assoc/private/sarthy_lab/NGS/CUTnRUN_Results/CLe2_K562_JIH5_TFs_CnT_07152024'
    peaks_outdir                = "${params.outdir}/peak_calls"
    publish_dir_mode            = 'copy'

    //Bowtie params for target genome
    build_index                 = false
    fasta                       = '/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/UCSC/hg38/Sequence/Bowtie2Index/genome.fa'
    index                       = '/data/hps/assoc/public/bioinformatics/annotations/Homo_sapiens/UCSC/hg38/Sequence/Bowtie2Index'
    save_unaligned              = false

    // Bowtie params for spike-in genome
    build_spike_index           = false
    spike_fasta                 = '/data/hps/assoc/private/sarthy_lab/CompBio/genome_index/ecoli/GCF_000005845.2_ASM584v2_genomic.fa' //required
    spike_index                 = '/data/hps/assoc/private/sarthy_lab/CompBio/genome_index/ecoli/ecoli_index' // bowtie2 index path is required unless `build_spike_index = true`

    //Optional: Picard module specific parameters
    remove_dups                 = false

    //Optional: Samtools view bam filtering parameters
    filter_bam                  = false
    mapq                        = 20 // use additional filters for -F or -f with ext.args in `samtools_filter:SAMTOOLS_VIEW` process config

    //SEACR params
    threshold                   = 0.01 //any value > 0 will use threshold, even if IgG is available in sample sheet
    spike_norm                  = false
    chrom_sizes                 = '/data/hps/assoc/private/sarthy_lab/CompBio/genome_index/hg38/hg38_chrom_sizes'
    scale_factor_constant       = 10000 //scientific notation NOT allowed

    //MACS2 params
    run_macs2                   = true
    no_control_macs2            = true   // if true, do not use IgG control in peak calling

    //MACS2 effective genome size params
    gsize                       = 2862010428 //default effective genome size for mouse from MACS2 
    calc_effective_gsize        = false  //if true, will override the value in gsize parameter
    read_length                 = 61    //if calc_effective_gsize, provide illumina read-length in base pairs

    //MultiQC
    multiqc_config              = './multiqc_config.yml'
    extra_multiqc_config        = ''
    multiqc_logo                = ''
}

// Computational resource allocation for the processes run in the workflow
process {
    //Bowtie2 aligner process specific parameters
    withName: BOWTIE2_ALIGN {
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.prefix = { "${meta.id}.sort" }
        ext.args = '--local --very-sensitive-local --no-unal --no-mixed --no-discordant --phred33 -I 10 -X 700'
        ext.args2 = ''      //command line arguments for `samtools sort`
    }

    //SEACR peak calling resources
    withName: SEACR_CALLPEAK {
        cpus = { 4 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.version = '1.4' //version 1.3 and 1.4 supported
        ext.args = '--normalize norm --mode stringent --remove yes'
        publishDir = [  path: { "${params.peaks_outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        failOnError: true,
                    ]
    }

    //MACS2 peak calling resources
    withName: MACS2_CALLPEAK {
        cpus = { 4 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = '-q 0.001 --keep-dup 1 --bdg'
        publishDir = [  path: { "${params.peaks_outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        failOnError: true,
                    ]
    }

    //BAMCOVERAGE bigwig file  parameters
    withName: DEEPTOOLS_BAMCOVERAGE {
        cpus = { 4 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = '--normalizeUsing CPM --centerReads --verbose'
    }

    //Picard to mark duplicate reads
    withName: PICARD_MARKDUPLICATES {
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.prefix = { "${meta.id}.markedDup" }
        ext.args = '--CREATE_MD5_FILE true --CREATE_INDEX true'
    }

    //Picard to Remove duplicate reads
    withName: PICARD_RMDUPLICATES {
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.prefix = { "${meta.id}.rmDup" }
        ext.args = '--REMOVE_DUPLICATES true --CREATE_MD5_FILE true --CREATE_INDEX true'
    }

    //Samtools to filter the aligned reads
    if ( params.filter_bam ){
        withName: SAMTOOLS_VIEW {
            cpus = { 4 * task.attempt }
            memory = { 32.GB * task.attempt }
            ext.prefix = { "${input.baseName}.filter" }
            ext.args = { "-q $params.mapq" }
        }
    }

    //Samtools sort by read name parameters
    withName: SAMTOOLS_NSORT {
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.prefix = { "${bam.baseName.replaceAll(/.sort/,"")}.nsort" }
        ext.args = '-n'
    }

    //convert bamtobed to bedgraph process specific resources
    withName: BAMTOBEDGRAPH {
        cpus = { 4 * task.attempt }
        memory = { 8.GB * task.attempt }
        ext.args = '' //for bedtools bamtobed
        ext.args2 = '' //for bedtools genomecov
    }

    //Samtools sort by coordinate (for bedtools process below)
    withName: SAMTOOLS_SORT {
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.prefix = { "${bam.baseName}.sort" }
        ext.args = ''
    }

    //Samtools sort by coordinate (for bedtools process below)
    withName: SAMTOOLS_INDEX {
        cpus = { 4 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: SAMTOOLS_STATS {
        cpus = { 4 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    if ( params.build_index ){
        //Bowtie2 aligner process specific parameters
        withName: BOWTIE2_BUILD {
            cpus = { 2 * task.attempt }
            memory = { 32.GB * task.attempt }
            ext.args = '--verbose'
        }
    }

    withName: SAMTOOLS_FAIDX {
        cpus = { 1 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    //FASTQC process specific parameters
    withName: FASTQC {
        cpus = 4
        memory = 16.GB
        ext.args = ''
    }

    //FASTQC_TRIM process specific parameters
    withName: FASTQC_TRIM {
        cpus = 4
        memory = 16.GB
        ext.args = ''
    }

    //DEEPTOOLS_MULTIBIGWIGSUMMARY process specific parameters
    withName: DEEPTOOLS_MULTIBIGWIGSUMMARY {
        cpus = 4
        memory = 16.GB
        ext.args = ''
    }

    //DEEPTOOLS_PLOTFINGERPRINT process specific parameters
    withName: DEEPTOOLS_PLOTFINGERPRINT {
        cpus = 1
        memory = 16.GB
        ext.args = ''
    }

    //DEEPTOOLS_PLOTCORRELATION process specific parameters
    withName: DEEPTOOLS_PLOTCORRELATION {
        cpus = 1
        memory = 16.GB
        ext.args = '--colorMap turbo --plotNumbers'
    }

    //DEEPTOOLS_PLOTPCA process specific parameters
    withName: DEEPTOOLS_PLOTPCA {
        cpus = 1
        memory = 16.GB
        ext.args = ''
    }

    withName: 'SEACR_PLOTENRICHMENT|MACS2_PLOTENRICHMENT|MACSPEAKSTOBED' {
        cpus = 1
        memory = 16.GB
        ext.args = ''
        publishDir = [  path: { "${params.peaks_outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        failOnError: true,
                    ]
    }

    //MultiQC process specific parameters
    withName: MULTIQC {
        cpus = { 1 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = '--verbose'
    }

    //Define the output directory name
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        failOnError: true,
    ]
    errorStrategy = "retry"
    maxRetries = 2
}

//Create profiles to easily switch between the different process executors and platforms.
profiles {
    //For running on an interactive session on cybertron with singularity module loaded
    local_singularity {
        process.executor = 'local'
        singularity.enabled = true
    }
    //For executing the jobs on the HPC cluster with singularity containers
    PBS_singularity {
        process.executor = 'pbspro'
        process.queue = "${params.queue}"
        process.clusterOptions = "-P ${params.project}"
        process.beforeScript = 'module load singularity'
        singularity.enabled = true
    }
    //For executing the jobs on the Saquatch HPC cluster with apptainer containers
    slurm_apptainer {
        process.executor = 'slurm'
        process.queue = "${params.partition}"
        process.clusterOptions = "--account=${params.account} --time=14-00:00:0"
        process.beforeScript = 'module load apptainer'
        apptainer.enabled = true
    }
    /*
    //For running on cybertron with apptainer module loaded
    local_apptainer {
        process.executor = 'local'
        apptainer.enabled = true
    }
        //For executing the jobs on the HPC cluster with conda environments.
    PBS_conda {
        process.executor = 'pbspro'
        process.queue = "${params.queue}"
        process.clusterOptions = "-P ${params.project}"
        conda.enabled = true
    }
    //For running interactively on local macbook with docker installed.
    local_docker {
        process.executor = 'local'
        docker.enabled = true
    }
    */
}

plugins { id 'nf-schema@2.0.0' }

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
// https://github.com/nf-core/tools/blob/master/nf_core/pipeline-template/nextflow.config
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

//Configs for singularity containers on cybertron
singularity {
    autoMounts = true
    engineOptions = '--debug'
    cacheDir = "$HOME/singularity_test"
    runOptions = '--containall --no-home'
}

//Configs for apptainer containers. Not supported on cybertron
apptainer {
    autoMounts = true
    ociAutoPull = false
    engineOptions = '--debug'
    cacheDir = "$HOME/apptainer_test"
    runOptions = '--containall --no-home'
}

//Use personal conda environments on cybertron if conda_enabled = true
conda {
    cacheDir = "$HOME/nxf_conda/envs/"
}

//Configs for docker containers on local macbook with 64Gb memory
docker {
    temp = 'auto'
    runOptions = "--platform linux/amd64 --memory=32g --cpus=0.000"
}

//overwrite reports when the workflow is executed again
report {
    overwrite = true
}

dag {
    overwrite = true
}

